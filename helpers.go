package echootelmiddleware

import (
	"fmt"
	"strings"
	"unicode/utf8"

	"github.com/labstack/echo/v4"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// limitString limits the given string to the given size (in bytes).
// If the string is longer than the given size, it will be truncated to
// the given size, and the last character will be replaced with an
// ellipsis ("..."). If the given size is 0 or less, the original string
// will be returned.
//
// Note that the given size is in bytes, not runes. This means that if
// the string contains non-ASCII characters, the resulting string may
// be shorter than the given size.
func limitString(str string, size int) string {
	if size <= 0 || len(str) <= size {
		return str
	}

	bytes := []byte(str)

	if len(bytes) <= size {
		return str
	}

	validBytes := bytes[:size]
	for !utf8.Valid(validBytes) {
		validBytes = validBytes[:len(validBytes)-1]
	}

	return string(validBytes)
}

// limitStringWithDots limits the given string to the given size (in bytes).
// If the string is longer than the given size, it will be truncated to
// the given size, and the last character will be replaced with an
// ellipsis ("..."). If the given size is 0 or less, the original string
// will be returned. If the given size is greater than 10, the last 3
// characters will be replaced with an ellipsis.
//
// Note that the given size is in bytes, not runes. This means that if
// the string contains non-ASCII characters, the resulting string may
// be shorter than the given size.
func limitStringWithDots(str string, size int) string {
	if size <= 10 {
		return limitString(str, size)
	}

	result := limitString(str, size-3)
	if result == str {
		return str
	}

	return result + "..."
}

// prepareTagValue limits the given string to the given size (in bytes).
// If the string is longer than the given size, it will be truncated to
// the given size, and the last character will be replaced with an
// ellipsis ("..."). If the given size is 0 or less, the original string
// will be returned. If removeNewLine is true, all newlines will be removed.
//
// Note that the given size is in bytes, not runes. This means that if
// the string contains non-ASCII characters, the resulting string may
// be shorter than the given size.
func prepareTagValue(str string, size int, removeNewLine bool) string {
	if removeNewLine {
		str = strings.ReplaceAll(str, "\n", " ") // no \n in strings
	}

	return limitStringWithDots(str, size)
}

// prepareTagName limits the given string to the given size (in bytes).
// If the string is longer than the given size, it will be truncated to
// the given size. If the given size is 0 or less, the original string
// will be returned.
//
// Note that the given size is in bytes, not runes. This means that if
// the string contains non-ASCII characters, the resulting string may
// be shorter than the given size.
func prepareTagName(str string, size int) string {
	return limitString(str, size)
}

// getRequestID returns the request ID from the given context.
// It first checks the `X-Request-ID` header of the incoming request.
// If that header is not present, it checks the `X-Request-ID` header
// of the response. This is useful if the request ID is generated by
// a middleware (e.g. middleware.RequestID()) and not set by a reverse-proxy.
func getRequestID(ctx echo.Context) string {
	requestID := ctx.Request().Header.Get(echo.HeaderXRequestID) // request-id generated by reverse-proxy
	if requestID == "" {
		// missed request-id from proxy,got generated one by middleware.RequestID()
		requestID = ctx.Response().Header().Get(echo.HeaderXRequestID)
	}

	return requestID
}

// setAttr sets attributes on the given span, preparing the attribute keys
// and values according to the given config.
//
// It first limits the attribute keys to the given size (in bytes), and
// then limits the attribute values to the given size (also in bytes).
// If the given size is 0 or less, the original attribute keys and values
// will be returned. If removeNewLine is true, all newlines will be removed
// from the attribute values.
//
// Note that the given size is in bytes, not runes. This means that if the
// attribute keys or values contain non-ASCII characters, the resulting
// attribute keys or values may be shorter than the given size.
func setAttr(span trace.Span, config OtelConfig, attrs ...attribute.KeyValue) {
	span.SetAttributes(prepareAttrs(config, attrs...)...)
}

// prepareAttrs prepares attribute keys and values according to the given config.
//
// It first limits the attribute keys to the given size (in bytes), and then
// limits the attribute values to the given size (also in bytes). If the given
// size is 0 or less, the original attribute keys and values will be returned.
// If removeNewLine is true, all newlines will be removed from the attribute
// values.
//
// Note that the given size is in bytes, not runes. This means that if the
// attribute keys or values contain non-ASCII characters, the resulting
// attribute keys or values may be shorter than the given size.
func prepareAttrs(config OtelConfig, attrs ...attribute.KeyValue) []attribute.KeyValue {
	for i := range attrs {
		attrs[i].Key = attribute.Key(prepareTagName(string(attrs[i].Key), config.LimitNameSize))
		if attrs[i].Value.Type() == attribute.STRING {
			attrs[i].Value = attribute.StringValue(prepareTagValue(attrs[i].Value.AsString(), config.LimitValueSize, config.RemoveNewLines))
		}
	}

	return attrs
}

// formatKey formats a key for use as an attribute key.
// It converts the key to lowercase, replaces hyphens with underscores,
// and adds a prefix.
func formatKey(k, prefix string) attribute.Key {
	k = strings.ToLower(k)
	k = strings.ReplaceAll(k, "-", "_")
	k = fmt.Sprintf("%s.%s", prefix, k)

	return attribute.Key(k)
}

func defaultBodySkipper(_ echo.Context) (skipReqBody bool, skipRespBody bool) {
	return
}
