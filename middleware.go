package echo_otel_middleware

import (
	"bytes"
	"io"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/propagation"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/semconv/v1.19.0/httpconv"
	oteltrace "go.opentelemetry.io/otel/trace"
)

const (
	tracerKey  = "echo-otel-middleware"
	tracerName = "github.com/adlandh/echo-otel-middleware"
)

type (
	// OtelConfig defines the config for OpenTelemetry middleware.
	OtelConfig struct {
		// Skipper defines a function to skip middleware.
		Skipper middleware.Skipper

		// OpenTelemetry TracerProvider
		TracerProvider oteltrace.TracerProvider

		// OpenTelemetry Propagator
		Propagator propagation.TextMapPropagator

		// add req headers & resp headers to tracing tags
		AreHeadersDump bool

		// add req body & resp body to attributes
		IsBodyDump bool

		// remove \\n from values (necessary for sentry)
		RemoveNewLines bool

		// Tag name limit size. <=0 for unlimited, for sentry use 32
		LimitNameSize int

		// Tag value limit size (in bytes)
		// NOTE: don't specify values larger than 60000 as jaeger can't handle values in span.LogKV larger than 60000 bytes
		// For sentry use 200
		LimitValueSize int
	}
)

var (
	// DefaultOtelConfig is the default OpenTelemetry middleware config.
	DefaultOtelConfig = OtelConfig{
		Skipper:        middleware.DefaultSkipper,
		AreHeadersDump: true,
		IsBodyDump:     false,
		LimitValueSize: 1024,
	}
)

// Middleware returns a OpenTelemetry middleware with default config
func Middleware() echo.MiddlewareFunc {
	return MiddlewareWithConfig(DefaultOtelConfig)
}

// MiddlewareWithConfig returns a OpenTelemetry middleware with config.
func MiddlewareWithConfig(config OtelConfig) echo.MiddlewareFunc {
	if config.TracerProvider == nil {
		config.TracerProvider = otel.GetTracerProvider()
	}
	tracer := config.TracerProvider.Tracer(tracerName)

	if config.Propagator == nil {
		config.Propagator = otel.GetTextMapPropagator()
	}

	if config.Skipper == nil {
		config.Skipper = middleware.DefaultSkipper
	}

	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			if config.Skipper(c) {
				return next(c)
			}

			c.Set(tracerKey, tracer)
			request := c.Request()
			savedCtx := request.Context()
			defer func() {
				request = request.WithContext(savedCtx)
				c.SetRequest(request)
			}()
			opname := "HTTP " + request.Method + " URL: " + c.Path()
			if c.Path() != c.Request().RequestURI {
				opname = opname + " URI: " + c.Request().RequestURI
			}
			realIP := c.RealIP()
			requestID := getRequestID(c) // request-id generated by reverse-proxy

			var span oteltrace.Span
			var err error

			ctx := config.Propagator.Extract(savedCtx, propagation.HeaderCarrier(request.Header))
			opts := []oteltrace.SpanStartOption{
				oteltrace.WithAttributes(httpconv.ServerRequest("", request)...),
				oteltrace.WithSpanKind(oteltrace.SpanKindServer),
				oteltrace.WithAttributes(attribute.String("client_ip", realIP), attribute.String("request_id", requestID)),
			}
			ctx, span = tracer.Start(ctx, opname, opts...)
			defer span.End()

			//Add path parameters
			for _, paramName := range c.ParamNames() {
				setAttr(span, config, "http.path."+paramName, c.Param(paramName))
			}

			//Dump request headers
			if config.AreHeadersDump {
				for k := range request.Header {
					setAttr(span, config, "http.req.header."+k, request.Header.Get(k))
				}
			}

			// Dump request & response body
			var respDumper *responseDumper
			if config.IsBodyDump {
				// request
				var reqBody []byte
				if c.Request().Body != nil {
					reqBody, _ = io.ReadAll(c.Request().Body)

					setAttr(span, config, "http.req.body", string(reqBody))
				}

				request.Body = io.NopCloser(bytes.NewBuffer(reqBody)) // reset original request body

				// response
				respDumper = newResponseDumper(c.Response())
				c.Response().Writer = respDumper
			}

			// setup request context - add opentracing span
			c.SetRequest(request.WithContext(ctx))

			// call next middleware / controller
			err = next(c)
			if err != nil {
				setAttr(span, config, "echo.error", err.Error())
				c.Error(err) // call custom registered error handler
			}

			status := c.Response().Status
			span.SetStatus(httpconv.ServerStatus(status))
			if status > 0 {
				span.SetAttributes(semconv.HTTPStatusCode(status))
			}

			//Dump response headers
			if config.AreHeadersDump {
				for k := range c.Response().Header() {
					setAttr(span, config, "http.resp.header."+k, c.Response().Header().Get(k))
				}
			}

			// Dump response body
			if config.IsBodyDump {
				setAttr(span, config, "http.resp.body", respDumper.GetResponse())
			}

			return nil // error was already processed with ctx.Error(err)
		}
	}
}
